// Generated by CoffeeScript 1.6.1
(function() {
  var checkData, createDaemonWebSocket, createMessage, createServerWebSocket, daemonws, getCookie, init, messages, procesLogin, processDaemon, processDaemons, processError, processIncomingMessage, processLoginCheck, processLogout, processMonitoring, processNotImplemented, sendControl, sendDaemon, sendDaemons, sendLogin, sendLoginCheck, sendLogout, serverAddress, serverws, setCookie, trySendMessage,
    __hasProp = {}.hasOwnProperty;

  serverAddress = "ws://localhost/ws";

  serverws = null;

  daemonws = null;

  $(document).ready(function() {
    return init;
  });

  messages = {
    out: {
      loginCheck: {
        data: ["session_id"]
      },
      login: {
        data: ["username", "password"]
      },
      logout: {
        data: []
      },
      daemons: {
        data: []
      },
      daemon: {
        data: ["daemon_id"]
      },
      control: {
        data: ["daemon_id", "operation"]
      }
    },
    "in": {
      loginCheck: {
        data: ["status"],
        process: processLoginCheck
      },
      login: {
        data: ["session_id"],
        process: processLogin
      },
      logout: {
        data: ["status"],
        process: processLogout
      },
      daemons: {
        data: [
          {
            daemon: ["daemon_id", "daemon_name", "daemon_state"]
          }
        ],
        process: processDaemons
      },
      daemon: {
        data: [
          "daemon_id", "daemon_address", "daemon_port", {
            daemon_platform: ["platform", "bla1", "bla2"],
            daemon_all_parameters: [],
            daemon_monitored_parameters: []
          }
        ],
        process: processDaemon
      },
      control: {
        data: ["daemon_id", "status"],
        process: processControl
      },
      monitoring: {
        data: [
          "daemon_id", {
            data: []
          }
        ],
        process: processMonitoring
      },
      not_implemented: {
        data: [],
        process: processNotImplemented
      },
      error: {
        data: [],
        process: processError
      }
    }
  };

  processIncomingMessage = function(msg) {
    var data, message, type;
    message = JSON.parse(msg);
    type = message.type;
    if (messages["in"][type]) {
      console.log("Received a message of type " + type);
      data = message.data;
      if (checkData(type, data, "in")) {
        return messages[type].process(data);
      }
    } else {
      return console.err("Received a message of unknown type");
    }
  };

  checkData = function(type, data, direction) {
    var dataTemplate, key, message;
    dataTemplate = messages[direction][type].data;
    for (key in dataTemplate) {
      if (!__hasProp.call(dataTemplate, key)) continue;
      if (!data.key) {
        console.err("Wrong data format");
        return false;
      }
    }
    if (direction === "out") {
      message = {
        type: type,
        data: JSON.stringify(data)
      };
      return message;
    } else if (direction === "in") {
      return true;
    } else {
      return console.err("wrong direction");
    }
  };

  processLoginCheck = function(data) {
    var status;
    status = data.status;
    switch (status) {
      case "OK":
        return console.log("You are logged in");
      case "UNAUTHORIZED":
        return console.log("You are not logged in");
    }
  };

  procesLogin = function(data) {
    var session_id;
    session_id = data.session_id;
    if (session_id) {
      return console.log("You have successfully logged in");
    } else {
      return console.log("Username or password are incorrect. Please log in");
    }
  };

  processLogout = function(data) {
    var status;
    status = data.status;
    switch (status) {
      case "OK":
        return console.log("You are no longer logged in");
      case "NOT_OK":
        return console.log("Sorry, an error has occured");
    }
  };

  processDaemons = function(data) {
    var daemon, daemon_id, daemon_name, daemon_state, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      daemon = data[_i];
      daemon_id = daemon.daemon_id;
      daemon_name = daemon.daemon_name;
      daemon_state = daemon.daemon_state;
      _results.push(console.log("ID " + daemon_id + "; Name " + daemon_name + "; State " + daemon_state + ";"));
    }
    return _results;
  };

  processDaemon = function(data) {
    var daemon_address, daemon_all_parameters, daemon_id, daemon_monitored_parameters, daemon_platform, daemon_port;
    daemon_id = data.daemon_id;
    daemon_address = data.daemon_address;
    daemon_port = data.daemon_port;
    daemon_platform = data.daemon_platform;
    daemon_all_parameters = data.daemon_all_parameters;
    daemon_monitored_parameters = data.daemon_monitored_parameters;
    return console.log("data for " + daemon_id + " loaded");
  };

  processMonitoring = function(data) {
    return console.log(data);
  };

  processNotImplemented = function(data) {
    return console.log(data);
  };

  processError = function(data) {
    return console.log(data);
  };

  createMessage = function(type, data) {
    var message;
    message = checkData(type, data, "out");
    return message;
  };

  trySendMessage = function(message) {
    if (message) {
      serverws.send(message);
      console.log("Login check message was sent");
      return true;
    } else {
      console.err("Login check message was aborted");
      return false;
    }
  };

  sendLoginCheck = function() {
    var message, session_id;
    session_id = getCookie("session_id");
    message = createMessage("loginCheck", {
      session_id: session_id
    });
    return trySendMessage(message);
  };

  sendLogin = function(username, password) {
    var message;
    message = createMessage("login", {
      username: username,
      password: password
    });
    return trySendMessage(message);
  };

  sendLogout = function() {
    var message;
    message = createMessage("logout");
    return trySendMessage(message);
  };

  sendDaemons = function() {
    var message;
    message = createMessage("daemons");
    return trySendMessage(message);
  };

  sendDaemon = function(daemon_id) {
    var message;
    message = createMessage("daemon", {
      daemon_id: daemon_id
    });
    return trySendMessage(message);
  };

  sendControl = function(daemon_id, operation) {
    var message;
    message = createMessage("control", {
      daemon_id: daemon_id,
      operation: operation
    });
    return trySendMessage(message);
  };

  setCookie = function(name, value, days) {
    var date, expires;
    if (days) {
      date = new Date;
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toGMTString();
    } else {
      expires = "";
    }
    return document.cookie = name + "=" + value + expires + "; path=/";
  };

  getCookie = function(key) {
    var c, _i, _len, _ref;
    key = key + "=";
    _ref = document.cookie.split(';');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      while (c.charAt(0) === ' ') {
        c.substring(1, c.length);
      }
      if (c.indexOf(key) === 0) {
        return c.substring(key.length, c.length);
      }
    }
    return null;
  };

  init = function() {
    return serverws = createServerWebSocket(serverAddress);
  };

  createServerWebSocket = function(address) {
    serverws = new WebSocket(serverAddress);
    serverws.onopen(function() {
      return sendLoginCheck;
    });
    serverws.onclose(function() {});
    serverws.onerror(function(event) {
      return console.err(event);
    });
    serverws.onmessage(function(msg) {
      return processIncomingMessage(msg);
    });
    return serverws;
  };

  createDaemonWebSocket = function(address) {
    daemonws = new WebSocket(address);
    daemonws.onopen(function() {
      return sendLoginCheck;
    });
    daemonws.onclose(function() {});
    daemonws.onerror(function(event) {
      return console.err(event);
    });
    daemonws.onmessage(function(msg) {
      return processIncomingMessage(msg);
    });
    return daemonws;
  };

}).call(this);
