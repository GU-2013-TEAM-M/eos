// Generated by CoffeeScript 1.6.3
var Alert, AlertView, Alerts, AlertsTabLayout, AlertsView, AppMainLayout, AppPageContentView, AppPageFooterView, AppPageHeaderView, AppPageLayout, AppState, Daemon, DaemonInfoView, DaemonSocket, DaemonView, Daemons, DaemonsView, Graph, GraphCPU, GraphRAM, GraphView, Graphs, HistoryContentView, HistoryTabLayout, HomeTabLayout, LoginPageContentView, LoginPageFooterView, LoginPageHeaderView, LoginPageLayout, MessageProcessor, Messages, MyApp, Router, ServerSocket, Service, Tab, TabSelectorView, TabView, Tabs, TabsView, UserTabLayout, WelcomePageContentView, WelcomePageFooterView, WelcomePageHeaderView, WelcomePageLayout, alertInstances, alerts, appState, controlStatus, cookieExpiryDays, daemons, error, getDaemon, graphs, initUI, isUserLoggedIn, layouts, loginCheckSuccessful, loginCheckUnsuccessful, loginSuccessful, loginUnsuccessful, logoutError, logoutSuccessful, monitoringData, notImplemented, processHistory, router, serverSocket, tabs, updateDaemons, views,
  __hasProp = {}.hasOwnProperty;

AppMainLayout = Backbone.Marionette.Layout.extend({
  template: "#app-page-content-template",
  regions: {
    tabSelector: "#tab-selector",
    tab: "#tab"
  },
  initialize: function() {},
  onRender: function() {
    this.tabSelector.show(views.tabSelectorView);
    if (appState.get("current_tab") === "") {
      return appState.set("current_tab", tabs.models[0].get("tab"));
    } else {
      return appState.trigger("change:current_tab");
    }
  }
});

WelcomePageLayout = Backbone.Marionette.Layout.extend({
  template: "#welcome-page-layout-template",
  regions: {
    header: "header",
    content: "#content",
    footer: "footer"
  },
  onRender: function() {
    this.header.show(views.welcomePageHeaderView);
    this.content.show(views.welcomePageContentView);
    return this.footer.show(views.welcomePageFooterView);
  }
});

LoginPageLayout = Backbone.Marionette.Layout.extend({
  template: "#login-page-layout-template",
  regions: {
    header: "header",
    content: "#content",
    footer: "footer"
  },
  onRender: function() {
    this.header.show(views.loginPageHeaderView);
    this.content.show(views.loginPageContentView);
    return this.footer.show(views.loginPageFooterView);
  }
});

AppPageLayout = Backbone.Marionette.Layout.extend({
  template: "#app-page-layout-template",
  regions: {
    header: "header",
    content: "#content",
    footer: "footer"
  },
  onRender: function() {
    this.header.show(views.appPageHeaderView);
    this.content.show(layouts.appMainLayout);
    return this.footer.show(views.appPageFooterView);
  }
});

HomeTabLayout = Backbone.Marionette.Layout.extend({
  id: "homeTabWrapper",
  template: "#home-tab-layout",
  regions: {
    daemonList: "#daemonList",
    daemonInfo: "#daemonInfo"
  },
  onRender: function() {
    this.daemonList.show(views.daemonsView);
    return this.daemonInfo.show(views.daemonInfoView);
  }
});

UserTabLayout = Backbone.Marionette.Layout.extend({
  template: "#user-tab-layout"
});

HistoryTabLayout = Backbone.Marionette.Layout.extend({
  template: "#history-tab-layout",
  regions: {
    daemonList: "#daemonList",
    historyContent: "#historyContent"
  },
  onRender: function() {
    this.daemonList.show(views.daemonsView);
    return this.historyContent.show(views.historyContentView);
  }
});

AlertsTabLayout = Backbone.Marionette.Layout.extend({
  id: "AlertsTabWrapper",
  template: "#alerts-tab-layout",
  regions: {
    daemonList: "#daemonList",
    alertList: "#alertList"
  },
  onRender: function() {
    return this.daemonList.show(views.daemonsView);
  }
});

WelcomePageHeaderView = Backbone.Marionette.ItemView.extend({
  template: "#welcome-page-header-template",
  className: ".welcome-pageheader"
});

WelcomePageContentView = Backbone.Marionette.ItemView.extend({
  template: "#welcome-page-content-template",
  className: ".welcome-page-content"
});

WelcomePageFooterView = Backbone.Marionette.ItemView.extend({
  template: "#welcome-page-footer-template",
  className: ".welcome-page-footer"
});

LoginPageHeaderView = Backbone.Marionette.ItemView.extend({
  template: "#login-page-header-template",
  className: ".login-page-header"
});

LoginPageContentView = Backbone.Marionette.ItemView.extend({
  template: "#login-page-content-template",
  className: ".login-page-content"
});

LoginPageFooterView = Backbone.Marionette.ItemView.extend({
  template: "#login-page-footer-template",
  className: ".login-page-footer"
});

AppPageHeaderView = Backbone.Marionette.ItemView.extend({
  template: "#app-page-header-template",
  className: "app-page-header"
});

AppPageFooterView = Backbone.Marionette.ItemView.extend({
  template: "#app-page-footer-template",
  className: "app-page-footer"
});

AppPageContentView = Backbone.Marionette.ItemView.extend({
  template: "#app-page-content-template",
  className: "app-page-content"
});

Tab = Backbone.Model.extend({});

Tabs = Backbone.Collection.extend({
  model: Tab
});

TabView = Backbone.Marionette.ItemView.extend({
  template: "#tab-template",
  className: "tabItem",
  tagName: "li",
  events: {
    'click': 'tabClicked'
  },
  tabClicked: function() {
    return appState.set("current_tab", this.model.get("tab"));
  }
});

TabsView = Backbone.Marionette.CompositeView.extend({
  id: "tabs",
  template: "#tabs-template",
  itemView: TabView,
  appendHtml: function(collectionView, itemView) {
    return collectionView.$("#tabsList").append(itemView.el);
  }
});

TabSelectorView = Backbone.Marionette.CompositeView.extend({
  id: "tabs",
  template: "#tabs-template",
  itemView: TabView,
  appendHtml: function(collectionView, itemView) {
    return collectionView.$("#tabsList").append(itemView.el);
  }
});

Daemon = Backbone.Model.extend({
  defaults: {
    daemon_id: null,
    daemon_name: null,
    daemon_state: null,
    daemon_address: null,
    daemon_port: null,
    daemon_platform: null,
    daemon_all_parameters: null,
    daemon_monitored_parameters: null,
    socket: null
  },
  initialize: function() {
    return new DaemonSocket(this);
  },
  setDaemonProperties: function(properties) {
    var key, value, _results;
    _results = [];
    for (key in properties) {
      if (!__hasProp.call(properties, key)) continue;
      value = properties[key];
      if (key !== "daemon_id") {
        _results.push(this.set(key, value));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  },
  stop: function() {
    var message;
    message = MessageProcessor.createMessage("control", {
      daemon_id: this.get("daemon_id"),
      operation: "stop"
    });
    if (message) {
      return this.get("socket").sendMessage(message);
    }
  },
  start: function() {
    var message;
    message = MessageProcessor.createMessage("control", {
      daemon_id: this.get("daemon_id"),
      operation: "start"
    });
    if (message) {
      return this.get("socket").sendMessage(message);
    }
  },
  monitor: function(parameter) {
    var message, monitored, operation;
    operation = {
      "start": [parameter]
    };
    message = MessageProcessor.createMessage("control", {
      daemon_id: this.get("daemon_id"),
      operation: operation
    });
    if (message) {
      this.get("socket").sendMessage(message);
    }
    monitored = this.get("daemon_monitored_parameters");
    if (monitored.indexOf(parameter) === -1) {
      return monitored.push(parameter);
    }
  },
  unmonitor: function(parameter) {
    var index, message, monitored, operation;
    operation = {
      "stop": [parameter]
    };
    message = MessageProcessor.createMessage("control", {
      daemon_id: this.get("daemon_id"),
      operation: operation
    });
    if (message) {
      this.get("socket").sendMessage(message);
    }
    monitored = this.get("daemon_monitored_parameters");
    index = monitored.indexOf(parameter);
    return monitored.splice(index, 1);
  },
  toggleMonitor: function(parameter) {
    var monitored;
    monitored = this.get("daemon_monitored_parameters");
    if (monitored.indexOf(parameter) > -1) {
      return this.unmonitor(parameter);
    } else {
      return this.monitor(parameter);
    }
  },
  processMonitoring: function(data) {
    var graph, key, value, _results,
      _this = this;
    console.log(data);
    _results = [];
    for (key in data) {
      if (!__hasProp.call(data, key)) continue;
      value = data[key];
      graph = graphs.find(function(model) {
        return model.get("daemon_id") === _this.get("daemon_id") && model.get("type") === key;
      });
      if (graph) {
        _results.push(graph.update(value));
      } else {
        _results.push(console.log("No graph found"));
      }
    }
    return _results;
  }
});

Daemons = Backbone.Collection.extend({
  model: Daemon
});

DaemonView = Backbone.Marionette.ItemView.extend({
  template: "#daemon-item-template",
  className: "daemonItem",
  tagName: "li",
  events: {
    'click': 'daemonClicked'
  },
  modelEvents: {
    'change': 'fieldsChanged'
  },
  fieldsChanged: function() {
    return this.render();
  },
  daemonClicked: function() {
    return appState.set("current_daemon", this.model);
  }
});

DaemonsView = Backbone.Marionette.CompositeView.extend({
  template: "#daemons-list-template",
  itemView: DaemonView,
  itemViewContainer: "ul",
  onRender: function() {
    var currentDaemon, el;
    currentDaemon = appState.get("current_daemon");
    if (currentDaemon) {
      el = views.daemonsView.children.findByModel(currentDaemon).el;
      $(".activeDaemon").removeClass("activeDaemon");
      return $(el).addClass("activeDaemon");
    }
  }
});

DaemonInfoView = Backbone.Marionette.ItemView.extend({
  events: {
    'click li': 'paramClicked'
  },
  getTemplate: function() {
    if (!this.model) {
      return "#daemon-info-template-empty";
    } else {
      return "#daemon-info-template";
    }
  },
  onBeforeRender: function() {
    this.model = appState.get("current_daemon");
    if (!this.model) {
      this.model = daemons.models[0];
      return appState.set("current_daemon", this.model);
    }
  },
  onRender: function() {
    var graph, monitoredParams, param, _i, _len, _results,
      _this = this;
    if (this.model) {
      monitoredParams = this.model.get("daemon_monitored_parameters");
      _results = [];
      for (_i = 0, _len = monitoredParams.length; _i < _len; _i++) {
        param = monitoredParams[_i];
        graph = graphs.find(function(model) {
          return model.get("daemon_id") === _this.model.get("daemon_id") && model.get("type") === param;
        });
        if (!graph) {
          switch (param) {
            case "CPU":
              graph = new GraphCPU({
                daemon_id: this.model.get("daemon_id"),
                options: {
                  cpuCount: 4
                }
              });
              break;
            case "RAM":
              graph = new GraphRAM({
                daemon_id: this.model.get("daemon_id"),
                options: {
                  totalRam: 2048
                }
              });
          }
          graphs.add(graph);
        }
        $("#graphs", this.el).append(graph.get("canvas"));
        graph.set("context", $("#graphs", this.el));
        _results.push(graph.reset());
      }
      return _results;
    }
  },
  paramClicked: function(event) {
    var el, param;
    el = event.target;
    param = $(el).text().trim();
    this.model.toggleMonitor(param);
    return this.render();
  }
});

HistoryContentView = Backbone.Marionette.ItemView.extend({
  template: "#history-content-template"
});

Alert = Backbone.Model.extend({
  defaults: {
    daemon: null,
    alert_id: null,
    alert_name: null,
    alert_parameter: null,
    alert_min: null,
    alert_max: null
  }
});

Alerts = Backbone.Collection.extend({
  model: Alert
});

AlertView = Backbone.Marionette.ItemView.extend({
  template: "#alert-item-template",
  className: "alertItem",
  tagName: "li"
});

AlertsView = Backbone.Marionette.CompositeView.extend({
  template: "#alerts-list-template",
  itemView: AlertView,
  tagname: "ul"
});

DaemonSocket = Backbone.Model.extend({
  defaults: {
    ws: null,
    reconnectTimer: null,
    reconnectTiming: 5 * 1000,
    daemon: null
  },
  initialize: function(daemon) {
    this.set("daemon", daemon);
    daemon.set("socket", this);
    return this.set("ws", this.createDaemonSocket());
  },
  createDaemonSocket: function() {
    var daemon, ws,
      _this = this;
    daemon = this.get("daemon");
    ws = new WebSocket(daemon.get("daemon_address"));
    ws.onopen = function() {
      return console.log("Connection to the daemon is established.");
    };
    ws.onclose = function(event) {
      var wasClean;
      wasClean = event.wasClean;
      if (!wasClean) {
        console.log("Connection to the daemon (" + ws.url + ") was lost unexpectedly. Re-connecting (" + _this.get("reconnectTiming") / 1000 + ")");
        return setTimeout(function() {
          return ws = _this.createDaemonSocket();
        }, _this.get("reconnectTiming"));
      } else {
        return console.log("Connection to the daemon was successfully closed.");
      }
    };
    ws.onerror = function() {
      return console.log("An error occured while talking to the daemon (" + this.url + ")");
    };
    ws.onmessage = function(messageEvent) {
      return MessageProcessor.process(messageEvent);
    };
    return ws;
  },
  sendMessage: function(message) {
    var stringMessage, ws;
    ws = this.get("ws");
    if (ws.readyState === 1) {
      stringMessage = JSON.stringify(message);
      ws.send(stringMessage);
      console.log(message.type + " message was sent " + stringMessage);
      return true;
    } else {
      console.log("message was  NOT sent");
      return false;
    }
  }
});

ServerSocket = Backbone.Model.extend({
  defaults: {
    ws: null,
    reconnectTimer: null,
    reconnectTiming: 5 * 1000
  },
  initialize: function() {
    return this.set("ws", this.createServerSocket());
  },
  createServerSocket: function() {
    var ws,
      _this = this;
    ws = new WebSocket(appState.get("server_address"));
    ws.onopen = function() {
      var message;
      console.log("Connection to the server is established.");
      appState.set("serverConnected", true);
      message = MessageProcessor.createMessage("loginCheck", {
        session_id: appState.get("session_id")
      });
      if (message) {
        return _this.sendMessage(message);
      }
    };
    ws.onclose = function(event) {
      var wasClean;
      wasClean = event.wasClean;
      if (!wasClean) {
        console.log("Connection to the server (" + ws.url + ") was lost unexpectedly. Re-connecting (" + _this.get("reconnectTiming") / 1000 + ")");
        setTimeout(function() {
          return ws = _this.createServerSocket();
        }, _this.get("reconnectTiming"));
      } else {
        console.log("Connection to the server was successfully closed.");
      }
      return appState.set("serverConnected", false);
    };
    ws.onerror = function() {
      return console.log("An error occured while talking to the server (" + this.url + ")");
    };
    ws.onmessage = function(messageEvent) {
      console.log(messageEvent);
      return MessageProcessor.process(messageEvent);
    };
    return ws;
  },
  sendMessage: function(message) {
    var stringMessage, ws;
    ws = this.get("ws");
    if (ws.readyState === 1) {
      stringMessage = JSON.stringify(message);
      ws.send(stringMessage);
      console.log(message.type + " message was sent " + stringMessage);
      return true;
    } else {
      console.log("message was  NOT sent");
      return false;
    }
  }
});

MessageProcessor = (function() {
  function MessageProcessor() {}

  MessageProcessor.createMessage = function(type, data, direction) {
    var message;
    message = {
      type: type,
      data: data
    };
    if (this.checkMessage(message, direction)) {
      return message;
    } else {
      return null;
    }
  };

  MessageProcessor.process = function(messageEvent) {
    var data, message, processCallback, target;
    data = messageEvent.data;
    target = messageEvent.target;
    console.log("Incoming message: " + data);
    message = JSON.parse(data);
    if (this.checkMessage(message, "in")) {
      processCallback = Messages.getMessageCallback("in", message.type);
      return processCallback(message.data);
    }
  };

  MessageProcessor.checkMessage = function(message, direction) {
    return true;
  };

  return MessageProcessor;

})();

Graph = Backbone.Model.extend({
  defaults: {
    daemon_id: null,
    data: null,
    canvas: null
  },
  initialize: function() {
    var canvas;
    canvas = "<canvas id='graph_" + this.cid + "' width='400' height='400'></canvas>";
    return this.set("canvas", canvas);
  },
  show: function() {},
  hide: function() {}
});

GraphView = Backbone.Marionette.ItemView.extend({
  template: "#graph-item-template",
  render: function() {
    return console.log(this.model);
  }
});

Graphs = Backbone.Collection.extend({
  model: Graph
});

GraphCPU = Graph.extend({
  defaults: {
    type: "CPU",
    cpuCount: null
  },
  initialize: function() {
    var cpuCount, data, i, labels, _i;
    Graph.prototype.initialize.apply(this, arguments);
    cpuCount = this.get("options").cpuCount;
    this.set("cpuCount", cpuCount);
    this.graphOptions = {
      animation: false,
      scaleOverride: true,
      scaleSteps: 10,
      scaleStepWidth: 10,
      scaleStartValue: 0
    };
    labels = [];
    for (i = _i = 0; 0 <= cpuCount ? _i < cpuCount : _i > cpuCount; i = 0 <= cpuCount ? ++_i : --_i) {
      labels.push("CPU " + (i + 1));
    }
    data = {
      labels: labels,
      datasets: [
        {
          fillColor: "rgba(153,153,153,0.5)",
          strokeColor: "rgba(220,220,220,1)",
          data: []
        }
      ]
    };
    return this.set("data", data);
  },
  createGraph: function() {
    return new Chart(($("#graph_" + this.cid, this.get("context")).get(0)).getContext("2d")).Bar(this.get("data"), this.graphOptions);
  },
  setData: function(data) {
    var graphData;
    graphData = this.get("data");
    return graphData.datasets[0].data = data;
  },
  update: function(data) {
    this.setData(data);
    return this.createGraph();
  },
  reset: function() {
    var data, i, _i, _ref;
    data = [];
    for (i = _i = 0, _ref = this.get("cpuCount"); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      data.push(0);
    }
    return this.update(data);
  }
});

GraphRAM = Graph.extend({
  defaults: {
    type: "RAM",
    totalRam: null
  },
  initialize: function() {
    var data, labels, totalRam;
    Graph.prototype.initialize.apply(this, arguments);
    totalRam = this.get("options").totalRam;
    this.set("totalRam", totalRam);
    this.graphOptions = {
      animation: false,
      scaleOverride: true,
      scaleSteps: totalRam / 256,
      scaleStepWidth: 256,
      scaleStartValue: 0
    };
    labels = ["RAM"];
    data = {
      labels: labels,
      datasets: [
        {
          fillColor: "rgba(153,153,153,0.5)",
          strokeColor: "rgba(220,220,220,1)",
          data: []
        }
      ]
    };
    return this.set("data", data);
  },
  createGraph: function() {
    return new Chart(($("#graph_" + this.cid, this.get("context")).get(0)).getContext("2d")).Bar(this.get("data"), this.graphOptions);
  },
  setData: function(data) {
    var graphData;
    console.log(data);
    graphData = this.get("data");
    return graphData.datasets[0].data = [data];
  },
  update: function(data) {
    this.setData(data);
    return this.createGraph();
  },
  reset: function() {
    return this.update([0]);
  }
});

Service = (function() {
  function Service() {}

  Service.setCookie = function(name, value, days) {
    var date, expires;
    if (days) {
      date = new Date;
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toGMTString();
    } else {
      expires = "";
    }
    return document.cookie = name + "=" + value + expires + "; path=/";
  };

  Service.getCookie = function(key) {
    var c, _i, _len, _ref;
    key = key + "=";
    _ref = document.cookie.split(';');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      while (c.charAt(0) === ' ') {
        c.substring(1, c.length);
      }
      if (c.indexOf(key) === 0) {
        return c.substring(key.length, c.length);
      }
    }
    return null;
  };

  return Service;

})();

AppState = Backbone.Model.extend({
  defaults: {
    user_id: "",
    user_name: "",
    state: "",
    current_state_layout: "",
    current_tab: "",
    server_address: null,
    current_daemon: null,
    serverConnected: false,
    session_id: Service.getCookie("session_id"),
    is_user_logged_in: false
  },
  initialize: function() {
    this.listenTo(this, "change:current_state_layout", function() {
      return MyApp.mainRegion.show(this.get("current_state_layout"));
    });
    this.listenTo(this, "change:current_tab", function() {
      return layouts.appMainLayout.tab.show(this.get("current_tab"));
    });
    return this.listenTo(this, "change:current_daemon", function() {
      views.daemonsView.render();
      return views.daemonInfoView.render();
    });
  }
});

Router = Backbone.Router.extend({
  routes: {
    "": "welcome",
    "welcome": "welcome",
    "login": "login",
    "app": "app"
  },
  welcome: function() {
    return appState.set("current_state_layout", layouts.welcomePageLayout);
  },
  login: function() {
    return appState.set("current_state_layout", layouts.loginPageLayout);
  },
  app: function() {
    return appState.set("current_state_layout", layouts.appPageLayout);
  }
});

Messages = (function() {
  var messages, processControl, processDaemons, processError, processHistory, processLogin, processLoginCheck, processLogout, processMonitoring, processNotImplemented;

  function Messages() {}

  messages = {
    out: {
      loginCheck: {
        data: ["session_id"]
      },
      login: {
        data: ["username", "password"]
      },
      logout: {
        data: []
      },
      daemons: {
        data: []
      },
      control: {
        data: ["daemon_id", "operation"]
      },
      history: {
        data: ["daemon_id", "start", "end", "param"]
      }
    },
    "in": {
      loginCheck: {
        data: ["status"],
        processCallback: function(data) {
          return processLoginCheck(data);
        }
      },
      login: {
        data: ["session_id"],
        processCallback: function(data) {
          return processLogin(data);
        }
      },
      logout: {
        data: ["status"],
        processCallback: function(data) {
          return processLogout(data);
        }
      },
      daemons: {
        data: ["daemon_id", "daemon_name", "daemon_state", "daemon_address", "daemon_port", "daemon_platform", "daemon_all_parameters", "daemon_monitored_parameters"],
        processCallback: function(data) {
          return processDaemons(data);
        }
      },
      control: {
        data: ["daemon_id", "status", "operation"],
        processCallback: function(data) {
          return processControl(data);
        }
      },
      monitoring: {
        data: ["daemon_id", "data"],
        processCallback: function(data) {
          return processMonitoring(data);
        }
      },
      history: {
        data: ["daemon_id", "start", "end", "param", "point_distance", "points"],
        processCallback: function(data) {
          return processHistory(data);
        }
      },
      not_implemented: {
        data: [],
        processCallback: function(data) {
          return processNotImplemented(data);
        }
      },
      error: {
        data: [],
        processCallback: function(data) {
          return processError(data);
        }
      }
    }
  };

  Messages.getMessageCallback = function(direction, type) {
    return messages[direction][type].processCallback;
  };

  processLoginCheck = function(data) {
    var status;
    status = "ok";
    switch (status) {
      case "ok":
        console.log("You are logged in");
        loginCheckSuccessful();
        return router.navigate("app", {
          trigger: true
        });
      case "unauthorized":
        console.log("You are not logged in");
        return router.navigate("login", {
          trigger: true
        });
    }
  };

  processLogin = function(data) {
    var session_id;
    session_id = data.session_id;
    if (session_id) {
      console.log("You have successfully logged in (" + session_id + ")");
      return loginSuccessful(session_id);
    } else {
      console.log("Username or password are incorrect. Please log in");
      return loginUnsuccessful(session_id);
    }
  };

  processLogout = function(data) {
    var status;
    status = data.status.toLowerCase();
    switch (status) {
      case "ok":
        return console.log("You are no longer logged in");
      case "not_ok":
        return console.log("Sorry, an error has occured");
    }
  };

  processDaemons = function(data) {
    var daemon, daemon_address, daemon_all_parameters, daemon_id, daemon_monitored_parameters, daemon_name, daemon_platform, daemon_port, daemon_state, existing, key, param, str, value, _i, _j, _k, _len, _len1, _len2, _results,
      _this = this;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      daemon = data[_i];
      daemon_id = daemon.daemon_id;
      daemon_name = daemon.daemon_name;
      daemon_state = daemon.daemon_state;
      daemon_address = daemon.daemon_address;
      daemon_port = daemon.daemon_port;
      daemon_platform = daemon.daemon_platform;
      daemon_all_parameters = daemon.daemon_all_parameters;
      daemon_monitored_parameters = daemon.daemon_monitored_parameters;
      str = "";
      for (key in daemon_platform) {
        if (!__hasProp.call(daemon_platform, key)) continue;
        value = daemon_platform[key];
        str += key + ": " + value + "; ";
      }
      str += " ALL PARAMS: ";
      for (_j = 0, _len1 = daemon_all_parameters.length; _j < _len1; _j++) {
        param = daemon_all_parameters[_j];
        str += param + ", ";
      }
      str += " MON PARAMS: ";
      for (_k = 0, _len2 = daemon_monitored_parameters.length; _k < _len2; _k++) {
        param = daemon_monitored_parameters[_k];
        str += param + ", ";
      }
      console.log("ID " + daemon_id + "; Name " + daemon_name + "; State " + daemon_state + "; address " + daemon_address + "; port " + daemon_port + ". " + str);
      existing = daemons.find(function(model) {
        return model.get("daemon_id") === daemon_id;
      });
      if (existing) {
        existing.setDaemonProperties({
          "daemon_name": daemon_name,
          "daemon_state": daemon_state,
          "daemon_address": daemon_address,
          "daemon_port": daemon_port,
          "daemon_platform": daemon_platform,
          "daemon_all_parameters": daemon_all_parameters,
          "daemon_monitored_parameters": daemon_monitored_parameters
        });
      } else {
        daemons.add(new Daemon({
          "daemon_id": daemon_id,
          "daemon_name": daemon_name,
          "daemon_state": daemon_state,
          "daemon_address": daemon_address,
          "daemon_port": daemon_port,
          "daemon_platform": daemon_platform,
          "daemon_all_parameters": daemon_all_parameters,
          "daemon_monitored_parameters": daemon_monitored_parameters
        }));
      }
      if (!appState.get("current_daemon")) {
        _results.push(appState.set("current_daemon", daemons.models[0]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  processControl = function(data) {
    var daemon_id, status;
    daemon_id = data.daemon_id;
    status = data.status;
    return console.log("Control for daemon " + daemon_id + " was " + status);
  };

  processMonitoring = function(data) {
    var daemon, daemon_id, key, mon, str, value;
    daemon_id = data.daemon_id;
    mon = data.data;
    str = "";
    for (key in mon) {
      if (!__hasProp.call(mon, key)) continue;
      value = mon[key];
      str += key + ": " + value + "; ";
    }
    console.log("Monitoring for " + daemon_id + ". " + str);
    daemon = daemons.find(function(model) {
      return model.get('daemon_id') === daemon_id;
    });
    if (daemon) {
      return daemon.processMonitoring(data.data);
    } else {
      return console.log("Can't find a daemon with id " + daemon_id);
    }
  };

  processHistory = function(data) {
    var daemon_id, end, param, start;
    daemon_id = data.daemon_id;
    start = data.start;
    end = data.end;
    param = data.param;
    return console.log("history for " + daemon_id + " param " + param + " for period from " + start + " to " + end);
  };

  processNotImplemented = function(data) {
    return console.log("Not implemented: " + JSON.stringify(data));
  };

  processError = function(data) {
    return console.log("Not implemented: " + JSON.stringify(data));
  };

  return Messages;

})();

isUserLoggedIn = false;

cookieExpiryDays = 3;

daemons = [];

loginCheckSuccessful = function() {
  return appState.set("is_user_logged_in", true);
};

loginCheckUnsuccessful = function() {
  return appState.set("is_user_logged_in", false);
};

loginSuccessful = function(session_id) {
  appState.set("is_user_logged_in", true);
  return setCookie("session_id", session_id, cookieExpiryDays);
};

loginUnsuccessful = function() {
  appState.set("is_user_logged_in", false);
  return setCookie("session_id", null, cookieExpiryDays);
};

logoutSuccessful = function() {
  appState.set("is_user_logged_in", false);
  setCookie("session_id", null, cookieExpiryDays);
  return daemons = [];
};

logoutError = function() {};

getDaemon = function(daemon_id) {
  var daemon, _i, _len;
  for (_i = 0, _len = daemons.length; _i < _len; _i++) {
    daemon = daemons[_i];
    if (daemon.daemon_id === daemon_id) {
      return daemon;
    }
  }
};

updateDaemons = function(data) {
  var daemon, daemon_id;
  daemon_id = data.daemon_id;
  daemon = getDaemon(daemon_id);
  if (daemon) {
    return daemon.setDaemonProperties(data);
  } else {
    return daemons.push(new Daemon(data));
  }
};

controlStatus = function(data) {};

monitoringData = function(data) {
  var daemon_id, graph, key, value, _results;
  daemon_id = data.daemon_id;
  data = data.data;
  _results = [];
  for (key in data) {
    if (!__hasProp.call(data, key)) continue;
    value = data[key];
    graph = getGraph(daemon_id, key);
    if (graph) {
      _results.push(graph.update(value));
    } else {
      _results.push(console.error("There is no graph associated with daemon: " + daemon_id + " for attribute: " + key));
    }
  }
  return _results;
};

processHistory = function(data) {};

notImplemented = function(data) {};

error = function(data) {};

initUI = function() {};

tabs = [];

daemons = new Daemons([
  {
    "daemon_id": "123",
    "daemon_name": "foo",
    "daemon_state": "RUNNING",
    "daemon_address": "ws://127.0.0.1:8080/ws",
    "daemon_port": "666",
    "daemon_platform": {
      "OS": "Linux",
      "Architecture": "64 bit"
    },
    "daemon_all_parameters": ["CPU", "RAM", "HDD"],
    "daemon_monitored_parameters": ["CPU"]
  }, {
    "daemon_id": "234",
    "daemon_name": "bar",
    "daemon_state": "STOPPED",
    "daemon_address": "123.456.789.123",
    "daemon_port": "777",
    "daemon_platform": {
      "OS": "Linux",
      "Architecture": "32 bit"
    },
    "daemon_all_parameters": ["CPU", "RAM", "HDD"],
    "daemon_monitored_parameters": ["CPU", "RAM"]
  }, {
    "daemon_id": "345",
    "daemon_name": "foobar",
    "daemon_state": "NOT_KNOWN",
    "daemon_address": "456.789.123.456",
    "daemon_port": "111",
    "daemon_platform": {
      "OS": "Linux",
      "Architecture": "128 bit"
    },
    "daemon_all_parameters": ["CPU", "RAM", "HDD"],
    "daemon_monitored_parameters": ["CPU", "HDD"]
  }, {
    "daemon_id": "456",
    "daemon_name": "Bob",
    "daemon_state": "EATING A PIZZA",
    "daemon_address": "789.123.456.789",
    "daemon_port": "222",
    "daemon_platform": {
      "OS": "Windows 7",
      "Architecture": "16 bit"
    },
    "daemon_all_parameters": ["CPU", "RAM", "HDD"],
    "daemon_monitored_parameters": ["HDD"]
  }
]);

alerts = new Alerts([
  {
    "daemon": daemons[0],
    "alert_id": "001",
    "alert_name": "CPU_Alert",
    "alert_parameter": "CPU",
    "alert_min": 80,
    "alert_max": 100
  }, {
    "daemon": daemons[1],
    "alert_id": "002",
    "alert_name": "CPU_Alert",
    "alert_parameter": "CPU",
    "alert_min": 80,
    "alert_max": 100
  }, {
    "daemon": daemons[1],
    "alert_id": "003",
    "alert_name": "RAM_Alert",
    "alert_parameter": "RAM",
    "alert_min": 80,
    "alert_max": 100
  }
]);

alertInstances = new AlertInstances([
  {
    "alert": alerts[0],
    "time": "01/01/14 00:00:00",
    "value": 83
  }, {
    "alert": alerts[0],
    "time": "02/01/14 00:00:00",
    "value": 90
  }, {
    "alert": alerts[0],
    "time": "03/01/14 00:00:00",
    "value": 85
  }, {
    "alert": alerts[1],
    "time": "01/01/14 09:30:13",
    "value": 83
  }, {
    "alert": alerts[2],
    "time": "01/01/14 09:30:13",
    "value": 95
  }, {
    "alert": alerts[2],
    "time": "01/01/14 09:50:36",
    "value": 82
  }
]);

graphs = new Graphs();

views = {};

layouts = {};

serverSocket = {};

appState = new AppState({
  server_address: "ws://127.0.0.1:8080/ws"
});

router = new Router();

MyApp = new Backbone.Marionette.Application();

MyApp.addRegions({
  mainRegion: "#mainRegion"
});

MyApp.addInitializer(function(options) {
  tabs = new Tabs([
    {
      name: "Home",
      tab: new HomeTabLayout()
    }, {
      name: "History",
      tab: new HistoryTabLayout()
    }, {
      name: "Alerts",
      tab: new AlertsTabLayout()
    }, {
      name: "User",
      tab: new UserTabLayout()
    }
  ]);
  layouts = {
    welcomePageLayout: new WelcomePageLayout(),
    loginPageLayout: new LoginPageLayout(),
    appPageLayout: new AppPageLayout(),
    appMainLayout: new AppMainLayout()
  };
  return views = {
    tabSelectorView: new TabSelectorView({
      collection: tabs
    }),
    appPageHeaderView: new AppPageHeaderView(),
    appPageFooterView: new AppPageFooterView(),
    loginPageHeaderView: new LoginPageHeaderView(),
    loginPageContentView: new LoginPageContentView(),
    loginPageFooterView: new LoginPageFooterView(),
    welcomePageHeaderView: new WelcomePageHeaderView(),
    welcomePageContentView: new WelcomePageContentView(),
    welcomePageFooterView: new WelcomePageFooterView(),
    daemonsView: new DaemonsView({
      collection: daemons
    }),
    daemonInfoView: new DaemonInfoView(),
    historyContentView: new HistoryContentView()
  };
});

MyApp.addInitializer(function(options) {
  return serverSocket = new ServerSocket();
});

MyApp.addInitializer(function(options) {
  return Backbone.history.start();
});

$(document).ready(function() {
  MyApp.start();
  return router.navigate("welcome", {
    trigger: true
  });
});
