// Generated by CoffeeScript 1.6.1
var Daemon, checkData, controlStatus, cookieExpiryDays, createDaemonWebSocket, createDaemons, createMessage, createServerWebSocket, daemons, daemonws, development, error, getCookie, getDaemon, init, initUI, isUserLoggedIn, loginCheckSuccessful, loginCheckUnsuccessful, loginSuccessful, loginUnsuccessful, logoutError, logoutSuccessful, messages, monitoringData, notImplemented, processControl, processDaemon, processDaemons, processError, processIncomingMessage, processLogin, processLoginCheck, processLogout, processMonitoring, processNotImplemented, reconnectTimerDaemon, reconnectTimerServer, reconnectTiming, sendControl, sendDaemon, sendDaemons, sendLogin, sendLoginCheck, sendLogout, serverAddress, serverws, session_id, setCookie, test, testIN, testOUT, testing, trySendMessage, updateDaemons, wsDaemonOnCloseHandler, wsDaemonOnErrorHandler, wsDaemonOnMessageHandler, wsDaemonOnOpenHandler, wsServerOnCloseHandler, wsServerOnErrorHandler, wsServerOnMessageHandler, wsServerOnOpenHandler,
  __hasProp = {}.hasOwnProperty;

setCookie = function(name, value, days) {
  var date, expires;
  if (days) {
    date = new Date;
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    expires = "; expires=" + date.toGMTString();
  } else {
    expires = "";
  }
  return document.cookie = name + "=" + value + expires + "; path=/";
};

getCookie = function(key) {
  var c, _i, _len, _ref;
  key = key + "=";
  _ref = document.cookie.split(';');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    c = _ref[_i];
    while (c.charAt(0) === ' ') {
      c.substring(1, c.length);
    }
    if (c.indexOf(key) === 0) {
      return c.substring(key.length, c.length);
    }
  }
  return null;
};

Daemon = (function() {

  function Daemon(daemon_id, daemon_name, daemon_state) {
    this.daemon_id = daemon_id;
    this.daemon_name = daemon_name;
    this.daemon_state = daemon_state;
    this.daemon_address = null;
    this.daemon_port = null;
    this.daemon_platform = null;
    this.daemon_all_parameters = null;
    this.daemon_monitored_parameters = null;
  }

  Daemon.prototype.setDaemonProperties = function(properties) {
    var key, value, _results;
    _results = [];
    for (key in properties) {
      if (!__hasProp.call(properties, key)) continue;
      value = properties[key];
      if (key !== "daemon_id") {
        _results.push(this[key] = value);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Daemon.prototype.stop = function() {
    sendControl(this.daemon_id, "stop");
  };

  Daemon.prototype.start = function() {
    return sendControl(this.daemon_id, "start");
  };

  Daemon.prototype.monitor = function(parameter) {
    var operation;
    operation = {
      "start": [parameter]
    };
    return sendControl(this.daemon_id, operation);
  };

  Daemon.prototype.unmonitor = function(parameter) {
    var operation;
    operation = {
      "stop": [parameter]
    };
    return sendControl(this.daemon_id, operation);
  };

  return Daemon;

})();

isUserLoggedIn = false;

cookieExpiryDays = 3;

session_id = getCookie("session_id");

daemons = [];

loginCheckSuccessful = function() {
  return isUserLoggedIn = true;
};

loginCheckUnsuccessful = function() {
  return isUserLoggedIn = false;
};

loginSuccessful = function(session_id) {
  isUserLoggedIn = true;
  return setCookie("session_id", session_id, cookieExpiryDays);
};

loginUnsuccessful = function() {
  isUserLoggedIn = false;
  return setCookie("session_id", null, cookieExpiryDays);
};

logoutSuccessful = function() {
  isUserLoggedIn = false;
  setCookie("session_id", null, cookieExpiryDays);
  return daemons = [];
};

logoutError = function() {};

createDaemons = function(data) {
  var daemon, daemon_id, daemon_name, daemon_state, _i, _len, _results;
  daemons = [];
  _results = [];
  for (_i = 0, _len = data.length; _i < _len; _i++) {
    daemon = data[_i];
    daemon_id = daemon.daemon_id;
    daemon_name = daemon.daemon_name;
    daemon_state = daemon.daemon_state;
    _results.push(daemons.push(new Daemon(daemon_id, daemon_name, daemon_state)));
  }
  return _results;
};

getDaemon = function(daemon_id) {
  var daemon, _i, _len;
  for (_i = 0, _len = daemons.length; _i < _len; _i++) {
    daemon = daemons[_i];
    if (daemon.daemon_id === daemon_id) {
      return daemon;
    }
  }
};

updateDaemons = function(data) {
  var daemon, daemon_id;
  daemon_id = data.daemon_id;
  daemon = getDaemon(daemon_id);
  if (daemon) {
    return daemon.setDaemonProperties(data);
  } else {
    return console.error("Sorry, you have tried to update a daemon that does not exist");
  }
};

controlStatus = function(data) {};

monitoringData = function(data) {};

notImplemented = function(data) {};

error = function(data) {};

initUI = function() {
  var ctx, data;
  ctx = ($("#myChart").get(0)).getContext("2d");
  data = null;
  return setInterval(function() {
    data = {
      labels: ["CPU1", "CPU2", "CPU3", "CPU4"],
      datasets: [
        {
          fillColor: "rgba(220,220,220,0.5)",
          strokeColor: "rgba(220,220,220,1)",
          data: [Math.floor(Math.random() * 100) + 1, Math.floor(Math.random() * 100) + 1, Math.floor(Math.random() * 100) + 1, Math.floor(Math.random() * 100) + 10]
        }
      ]
    };
    return new Chart(ctx).Bar(data, {
      animation: false,
      scaleOverride: true,
      scaleSteps: 10,
      scaleStepWidth: 10,
      scaleStartValue: 0
    });
  }, 1000);
};

serverAddress = "ws://192.168.1.100:8080/ws";

serverws = null;

daemonws = null;

reconnectTimerServer = null;

reconnectTimerDaemon = null;

reconnectTiming = 5000;

testing = false;

testOUT = false;

testIN = true;

development = true;

$(document).ready(function() {
  return init();
});

init = function() {
  serverws = createServerWebSocket(serverAddress);
  return initUI();
};

messages = {
  out: {
    loginCheck: {
      data: ["session_id"]
    },
    login: {
      data: ["username", "password"]
    },
    logout: {
      data: []
    },
    daemons: {
      data: []
    },
    daemon: {
      data: ["daemon_id"]
    },
    control: {
      data: ["daemon_id", "operation"]
    }
  },
  "in": {
    loginCheck: {
      data: ["status"],
      processCallback: function(data) {
        return processLoginCheck(data);
      }
    },
    login: {
      data: ["session_id"],
      processCallback: function(data) {
        return processLogin(data);
      }
    },
    logout: {
      data: ["status"],
      processCallback: function(data) {
        return processLogout(data);
      }
    },
    daemons: {
      data: ["daemon_id", "daemon_name", "daemon_state"],
      processCallback: function(data) {
        return processDaemons(data);
      }
    },
    daemon: {
      data: ["daemon_id", "daemon_address", "daemon_port", "daemon_platform", "daemon_all_parameters", "daemon_monitored_parameters"],
      processCallback: function(data) {
        return processDaemon(data);
      }
    },
    control: {
      data: ["daemon_id", "status", "operation"],
      processCallback: function(data) {
        return processControl(data);
      }
    },
    monitoring: {
      data: ["daemon_id", "data"],
      processCallback: function(data) {
        return processMonitoring(data);
      }
    },
    not_implemented: {
      data: [],
      processCallback: function(data) {
        return processNotImplemented(data);
      }
    },
    error: {
      data: [],
      processCallback: function(data) {
        return processError(data);
      }
    }
  }
};

processIncomingMessage = function(msg, from, messageEvent) {
  var data, message, type;
  console.log("Incoming message: " + msg);
  message = JSON.parse(msg);
  type = message.type;
  if (messages["in"][type]) {
    data = message.data;
    if (checkData(type, data, "in")) {
      return messages["in"][type].processCallback(data);
    }
  } else {
    return console.error("Received a message of unknown type");
  }
};

checkData = function(type, data, direction) {
  var daemon, dataTemplate, key, keyname, message, _i, _len;
  dataTemplate = messages[direction][type].data;
  for (key in dataTemplate) {
    if (!__hasProp.call(dataTemplate, key)) continue;
    keyname = dataTemplate[key];
    if (type === "daemons" && (direction = "in")) {
      if (data) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          daemon = data[_i];
          if (!daemon.hasOwnProperty(keyname)) {
            console.error("Wrong data format");
            return false;
          }
        }
      } else {
        console.error("Wrong data format");
        return false;
      }
    } else {
      if (data) {
        if (!data.hasOwnProperty(keyname)) {
          console.error("Wrong data format");
          return false;
        }
      } else {
        console.error("Wrong data format");
        return false;
      }
    }
  }
  if (direction === "out") {
    message = {
      type: type,
      data: data
    };
    return message;
  } else if (direction === "in") {
    return true;
  } else {
    return console.error("wrong direction");
  }
};

processLoginCheck = function(data) {
  var status;
  status = data.status;
  switch (status) {
    case "OK":
      console.log("You are logged in");
      return loginCheckSuccessful();
    case "UNAUTHORIZED":
      console.log("You are not logged in");
      return loginCheckUnsuccessful();
  }
};

processLogin = function(data) {
  session_id = data.session_id;
  if (session_id) {
    console.log("You have successfully logged in (" + session_id + ")");
    return loginSuccessful(session_id);
  } else {
    console.log("Username or password are incorrect. Please log in");
    return loginUnsuccessful(session_id);
  }
};

processLogout = function(data) {
  var status;
  status = data.status;
  switch (status) {
    case "OK":
      console.log("You are no longer logged in");
      return logoutSuccessful();
    case "NOT_OK":
      console.log("Sorry, an error has occured");
      return logoutError();
  }
};

processDaemons = function(data) {
  var daemon, daemon_id, daemon_name, daemon_state, _i, _len;
  for (_i = 0, _len = data.length; _i < _len; _i++) {
    daemon = data[_i];
    daemon_id = daemon.daemon_id;
    daemon_name = daemon.daemon_name;
    daemon_state = daemon.daemon_state;
    console.log("ID " + daemon_id + "; Name " + daemon_name + "; State " + daemon_state + ";");
  }
  return createDaemons(data);
};

processDaemon = function(data) {
  var daemon_address, daemon_all_parameters, daemon_id, daemon_monitored_parameters, daemon_platform, daemon_port, key, param, str, value, _i, _j, _len, _len1;
  daemon_id = data.daemon_id;
  daemon_address = data.daemon_address;
  daemon_port = data.daemon_port;
  daemon_platform = data.daemon_platform;
  daemon_all_parameters = data.daemon_all_parameters;
  daemon_monitored_parameters = data.daemon_monitored_parameters;
  str = "";
  for (key in daemon_platform) {
    if (!__hasProp.call(daemon_platform, key)) continue;
    value = daemon_platform[key];
    str += key + ": " + value + "; ";
  }
  str += " ALL PARAMS: ";
  for (_i = 0, _len = daemon_all_parameters.length; _i < _len; _i++) {
    param = daemon_all_parameters[_i];
    str += param + ", ";
  }
  str += " MON PARAMS: ";
  for (_j = 0, _len1 = daemon_monitored_parameters.length; _j < _len1; _j++) {
    param = daemon_monitored_parameters[_j];
    str += param + ", ";
  }
  console.log("ID " + daemon_id + "; address " + daemon_address + "; port " + daemon_port + ". " + str);
  return updateDaemons(data);
};

processControl = function(data) {
  var daemon_id, status;
  daemon_id = data.daemon_id;
  status = data.status;
  console.log("Control for daemon " + daemon_id + " was " + status);
  return controlStatus(data);
};

processMonitoring = function(data) {
  var daemon_id, key, mon, str, value;
  daemon_id = data.daemon_id;
  mon = data.data;
  str = "";
  for (key in mon) {
    if (!__hasProp.call(mon, key)) continue;
    value = mon[key];
    str += key + ": " + value + "; ";
  }
  console.log("Monitoring for " + daemon_id + ". " + str);
  return monitoringData(data);
};

processNotImplemented = function(data) {
  console.log("Not implemented: " + JSON.stringify(data));
  return notImplemented(data);
};

processError = function(data) {
  console.log("Not implemented: " + JSON.stringify(data));
  return error(data);
};

createMessage = function(type, data) {
  var message;
  message = checkData(type, data, "out");
  return message;
};

trySendMessage = function(msg) {
  var message;
  try {
    message = JSON.stringify(msg);
    serverws.send(message);
    return console.log(msg.type + " message was sent " + message);
  } catch (err) {
    console.error(err);
    return false;
  } finally {
    return true;
  }
};

sendLoginCheck = function(session_id) {
  var message;
  message = createMessage("loginCheck", {
    session_id: session_id
  });
  return trySendMessage(message);
};

sendLogin = function(username, password) {
  var message;
  message = createMessage("login", {
    username: username,
    password: password
  });
  return trySendMessage(message);
};

sendLogout = function() {
  var message;
  message = createMessage("logout");
  return trySendMessage(message);
};

sendDaemons = function() {
  var message;
  message = createMessage("daemons");
  return trySendMessage(message);
};

sendDaemon = function(daemon_id) {
  var message;
  message = createMessage("daemon", {
    daemon_id: daemon_id
  });
  return trySendMessage(message);
};

sendControl = function(daemon_id, operation) {
  var message;
  message = createMessage("control", {
    daemon_id: daemon_id,
    operation: operation
  });
  return trySendMessage(message);
};

createServerWebSocket = function(address) {
  serverws = new WebSocket(serverAddress);
  serverws.onopen = wsServerOnOpenHandler;
  serverws.onclose = wsServerOnCloseHandler;
  serverws.onerror = wsServerOnErrorHandler;
  serverws.onmessage = wsServerOnMessageHandler;
  return serverws;
};

createDaemonWebSocket = function(address) {
  daemonws = new WebSocket(address);
  daemonws.onopen = wsDaemonOnOpenHandler;
  daemonws.onclose = wsDaemonOnCloseHandler;
  daemonws.onerror = wsDaemonOnErrorHandler;
  daemonws.onmessage = wsDaemonOnMessageHandler;
  return daemonws;
};

wsServerOnOpenHandler = function() {
  console.log("Connection to the server is established.");
  if (reconnectTimerServer) {
    window.clearInterval(reconnectTimerServer);
    reconnectTimerServer = null;
  }
  if (!development) {
    return sendLoginCheck("123");
  } else if (testing) {
    return test();
  }
};

wsServerOnCloseHandler = function(event) {
  var wasClean;
  wasClean = event.wasClean;
  if (!wasClean) {
    console.log("Connection to the server (" + serverAddress + ") was lost unexpectedly. Re-connecting (" + reconnectTiming / 1000 + ")");
    if (!reconnectTimerServer) {
      return reconnectTimerServer = setInterval(function() {
        return serverws = createServerWebSocket(serverAddress);
      }, reconnectTiming);
    }
  } else {
    return console.log("Connection to the server was successfully closed.");
  }
};

wsServerOnErrorHandler = function(error) {
  return console.error("An error occured while talking to the server (" + serverAddress + ")");
};

wsServerOnMessageHandler = function(messageEvent) {
  return processIncomingMessage(messageEvent.data, messageEvent.target, messageEvent);
};

wsDaemonOnOpenHandler = function() {
  return sendLoginCheck("123");
};

wsDaemonOnCloseHandler = function(event) {
  var wasClean;
  wasClean = event.wasClean;
  if (!wasClean) {
    console.log("Connection to the daemon was lost unexpectedly. Re-connecting (" + reconnectTiming / 1000 + ")");
    if (!reconnectTimerDaemon) {
      return reconnectTimerDaemon = setInterval(function() {
        return daemonws = createServerWebSocket(daemonAddress);
      }, reconnectTiming);
    }
  } else {
    return console.log("Connection to the daemon was successfully closed.");
  }
};

wsDaemonOnErrorHandler = function(error) {
  return console.error("An error occured while talking to the daemon");
};

wsDaemonOnMessageHandler = function(messageEvent) {
  return processIncomingMessage(messageEvent.data, messageEvent.target, messageEvent);
};

test = function() {
  var controlMessageNOTOK, controlMessageOK, daemonMessage, daemonsMessage, errorMessage, loginCheckMessageOK, loginCheckMessageUNAUTHORIZED, loginMessageNOTNULL, loginMessageNULL, logoutMessageNOTOK, logoutMessageOK, monitoringMessage1, monitoringMessage2, monitoringMessage3, not_implementedMessage;
  if (testOUT) {
    console.log("OUTGOING TEST. DON'T PAY ATTENTION TO THE ERRORS - ECHO SERVER GIVES BACK BAD DATA (NOT BAD, BUT THE SAME)");
    sendLoginCheck();
    sendLogin("foo", "bar");
    sendLogout();
    sendDaemons();
    sendDaemon("123123123");
    sendControl("123123123", "DIE");
  }
  if (testIN) {
    console.log("INCOMING TEST");
    loginCheckMessageOK = {
      type: "loginCheck",
      data: {
        "status": "OK"
      }
    };
    trySendMessage(loginCheckMessageOK);
    loginCheckMessageUNAUTHORIZED = {
      type: "loginCheck",
      data: {
        "status": "UNAUTHORIZED"
      }
    };
    trySendMessage(loginCheckMessageUNAUTHORIZED);
    loginMessageNOTNULL = {
      type: "login",
      data: {
        "session_id": "123123123"
      }
    };
    trySendMessage(loginMessageNOTNULL);
    loginMessageNULL = {
      type: "login",
      data: {
        "session_id": null
      }
    };
    trySendMessage(loginMessageNULL);
    logoutMessageOK = {
      type: "logout",
      data: {
        "status": "OK"
      }
    };
    trySendMessage(logoutMessageOK);
    logoutMessageNOTOK = {
      type: "logout",
      data: {
        "status": "NOT_OK"
      }
    };
    trySendMessage(logoutMessageNOTOK);
    daemonsMessage = {
      type: "daemons",
      data: [
        {
          "daemon_id": "123",
          "daemon_name": "foo",
          "daemon_state": "RUNNING"
        }, {
          "daemon_id": "234",
          "daemon_name": "bar",
          "daemon_state": "STOPPED"
        }, {
          "daemon_id": "345",
          "daemon_name": "foobar",
          "daemon_state": "NOT_KNOWN"
        }, {
          "daemon_id": "456",
          "daemon_name": "Bob",
          "daemon_state": "EATING A PIZZA"
        }
      ]
    };
    trySendMessage(daemonsMessage);
    daemonMessage = {
      type: "daemon",
      data: {
        "daemon_id": "123",
        "daemon_address": "123.123.123.123",
        "daemon_port": "666",
        "daemon_platform": {
          "OS": "Linux",
          "Architecture": "64 bit"
        },
        "daemon_all_parameters": ["CPU", "RAM", "HDD"],
        "daemon_monitored_parameters": ["CPU"]
      }
    };
    trySendMessage(daemonMessage);
    daemonMessage = {
      type: "daemon",
      data: {
        "daemon_id": "567",
        "daemon_address": "123.123.123.123",
        "daemon_port": "666",
        "daemon_platform": {
          "OS": "Linux",
          "Architecture": "64 bit"
        },
        "daemon_all_parameters": ["CPU", "RAM", "HDD"],
        "daemon_monitored_parameters": ["CPU"]
      }
    };
    trySendMessage(daemonMessage);
    controlMessageOK = {
      type: "control",
      data: {
        "daemon_id": "123",
        "status": "OK",
        "operation": "KILL"
      }
    };
    trySendMessage(controlMessageOK);
    controlMessageNOTOK = {
      type: "control",
      data: {
        "daemon_id": "123",
        "status": "NOT_OK",
        "operation": {
          "start": ["CPU", "RAM"],
          "stop": ["NET"]
        }
      }
    };
    trySendMessage(controlMessageNOTOK);
    monitoringMessage1 = {
      type: "monitoring",
      data: {
        "daemon_id": "123",
        "data": {
          "CPU": "100",
          "RAM": "111"
        }
      }
    };
    trySendMessage(monitoringMessage1);
    monitoringMessage2 = {
      type: "monitoring",
      data: {
        "daemon_id": "234",
        "data": {
          "CPU": "50",
          "RAM": "222"
        }
      }
    };
    trySendMessage(monitoringMessage2);
    monitoringMessage3 = {
      type: "monitoring",
      data: {
        "daemon_id": "345",
        "data": {
          "CPU": "25",
          "RAM": "333"
        }
      }
    };
    trySendMessage(monitoringMessage3);
    not_implementedMessage = {
      type: "not_implemented",
      data: {
        "this": "is a wrong message"
      }
    };
    trySendMessage(not_implementedMessage);
    errorMessage = {
      type: "error",
      data: {
        "error": "error info"
      }
    };
    return trySendMessage(errorMessage);
  }
};
